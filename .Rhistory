knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
include = TRUE
)
knitr::include_graphics("Pics/factiva.png")
knitr::include_graphics("Pics/factiva2.png")
# install.packages("devtools")
# devtools::install_github("koheiw/newspapers")
require(newspapers, quietly = TRUE)
library(tidyverse)
library(stringr)
library(tm)
install.packages("tm")
# install.packages("devtools")
# devtools::install_github("koheiw/newspapers")
require(newspapers, quietly = TRUE)
library(tidyverse)
library(stringr)
# install.packages("tm")
library(tm)
library(dplyr)
dat = import_factiva("Data/html_files/")
# install.packages("devtools")
devtools::install_github("koheiw/newspapers")
dat = import_factiva("Data/html_files/")
# to install the packages...
# install.packages("devtools")
# devtools::install_github("koheiw/newspapers")
library(newspapers, quietly = TRUE)
library(tidyverse)
library(stringr)
# install.packages("tm")
library(tm)
library(dplyr)
dat = import_factiva("Data/html_files/")
View(dat)
dat = import_factiva("Data/html_files/")
dat = import_factiva("Data/html_files/")
# to install the packages...
# install.packages("devtools")
# devtools::install_github("koheiw/newspapers")
library(newspapers)
library(tidyverse)
library(stringr)
# install.packages("tm")
library(tm)
library(dplyr)
dat = import_factiva("Data/html_files/")
knitr::include_graphics("Pics/dna-tool.png")
# install.packages("rJava")
# install.packages("Rcpp")
# install.packages("rDNA")
library("rJava")
#### initiate java
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.version")
.jcall("java/lang/System", "S", "getProperty", "java.home")
.jcall("java/lang/System", "S", "getProperty", "os.arch") # java, Os and R architecture must match. In my case it is 64; amd 64 and x86_64
.jcall("java/lang/System", "S", "getProperty", "sun.arch.data.model")
# install.packages("devtools")
#
# ## Install rDNA
#
# install.packages("devtools")
# devtools::install_url("https://github.com/leifeld/dna/releases/download/v2.0-beta.22/rDNA_2.1.9.tar.gz", INSTALL_opts = "--no-multiarch")
# install.packages("remotes")
# remotes::install_github("leifeld/dna/rDNA", INSTALL_opts = "--no-multiarch")
library(rDNA)
# install.packages("statnet")
# install.packages("xergm")
# install.packages("igraph")
# install.packages("cluster")
# install.packages("GGally")
# install.packages("intergraph")
# install.packages("ape")
library(statnet)
library(xergm)
# install.packages("statnet")
install.packages("xergm")
# set seed
set.seed (12345)
# Load DNA file
dna_init ("dna-2.0-beta25.jar") # Please note, that there could be newer version available. Make sure that the version you are working with (saved in your folder) is the same as mentioned here.
# dna_gui("DNA_file_2009_10_Marlene_JB.dna") # this command can be used to call the DNA software
# Load Connections
conn <- dna_connection("Data/DNA_file_2009_10_Marlene.dna")
# Load network & save two-mode as .csv file
nw = dna_network (conn, networkType = "twomode",
statementType = "DNA Statement",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "combine", # co-agreement; or co-disagreement
# normalization = "activity",
isolates = FALSE,
duplicates = "document" # I want to count the number times an actor or concept is measured across all docs, but not within
# excludeValues = list("concept" =
#"CC as threat to the domestic economy.", "concept" = "Significant carbon sink potential in soil.", "concept" = "Changing individual lifestyle feasible.")
)
# Load attributes
at1 = dna_getAttributes(conn, variable = "organization")
at2 = dna_getAttributes(conn, variable = "concept")
# write files
rownames(nw) <- at1$alias
colnames(nw) <- at2$value
write.csv2(nw, file ="two-mode-CH_en.csv") # for later use
write.csv2(at1, file = "Covariables_Actors_Switzerland.csv")
write.csv2(at2, file = "Covariables_Concepts_Switzerland.csv")
# help("dna_network")
one_mode_actors_norm = dna_network (conn, networkType = "onemode",
statementType = "DNA Statement",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence", # co-agreement; or co-disagreement
normalization = "Jaccard",
isolates = FALSE,
duplicates = "document", # I want to count the number times an actor or concept is measured across all docs, but not within
excludeValues = list("concept" =
"CC as threat to the domestic economy.", "concept" = "Significant carbon sink potential in soil.", "concept" = "Changing individual lifestyle feasible.")
)
# Create network object
one_mode_actors_net_norm <- network(one_mode_actors_norm, directed = FALSE, ignore.eval = FALSE, names.eval="weight")
# adding attributes 1
one_mode_actors_net_norm%v%"actorType" <-at1$alias
one_mode_actors_net_norm%v%"name" <-at1$type
unique(at1$alias)
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 3, mode = "fruchtermanreingold",  node.size = 10,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "actorType", color.legend = "Actor type",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("Government" = "red", "Civil society" = "green", "Business" = "yellow",
"Science" = "blue", "Political party" = "grey",
"IGO" = "orange", "Civil Society" = "white"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
library("ggnet")
library("ggnet2")
install.packages("ggnet2")
# install.packages("ggnet2")
library("ggnet2")
library(ggplot2)
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 3, mode = "fruchtermanreingold",  node.size = 10,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "actorType", color.legend = "Actor type",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("Government" = "red", "Civil society" = "green", "Business" = "yellow",
"Science" = "blue", "Political party" = "grey",
"IGO" = "orange", "Civil Society" = "white"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
library(ggplot2)
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 3, mode = "fruchtermanreingold",  node.size = 10,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "actorType", color.legend = "Actor type",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("Government" = "red", "Civil society" = "green", "Business" = "yellow",
"Science" = "blue", "Political party" = "grey",
"IGO" = "orange", "Civil Society" = "white"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
install.packages("GGally")
library(GGally)
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 3, mode = "fruchtermanreingold",  node.size = 10,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "actorType", color.legend = "Actor type",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("Government" = "red", "Civil society" = "green", "Business" = "yellow",
"Science" = "blue", "Political party" = "grey",
"IGO" = "orange", "Civil Society" = "white"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
ggsave("graph_degree1_actor-actor_CH_2009_fruchtermanreingold.v2_en.png", width = 29, height = 18,  device = NULL, dpi = 300)
par(mfrow = c(1, 2))
dna_barplot(conn, of = "concept", fontSize = 10)
dna_barplot(conn, of = "organization", fontSize = 10)
rownames(one_mode_actors_norm) <- at1$type
colnames(one_mode_actors_norm) <- at1$type
nw.1 <- graph.adjacency(one_mode_actors_norm, mode = "undirected", weighted = TRUE)
library(igrap)
library(igraph)
rownames(one_mode_actors_norm) <- at1$type
colnames(one_mode_actors_norm) <- at1$type
nw.1 <- graph.adjacency(one_mode_actors_norm, mode = "undirected", weighted = TRUE)
set_vertex_attr(nw.1, "alias", value = at1$type)
set_vertex_attr(nw.1, "actor.type", value = at1$alias)
nw.1 <- delete.vertices(simplify(nw.1), degree(nw.1)==0)
plot(nw.1)
myCentrality <- function(net) {
if (!is.igraph(net)) stop ("Input is not an igraph object")
deg <- degree(net, loop=F, normalized = F)
deg_norm <- degree (net, loop=F, normalized = T)
btw <- betweenness (net, normalized=TRUE)
evc <- evcent(net)$vector
pgr <- page.rank(net)$vector
id <- V(net)
ret <-data.frame (cbind(ID=id, Degree=deg, Degree_norm=deg_norm, Betweenness=btw,
Eigenvector=evc, PageRank=pgr))
return(ret)
}
Results <- myCentrality(nw.1)
Results_r <- data.frame(apply(Results[1:5],2, function(x) round(x, 3)))
write.csv2(Results, file = "Z:/Lehre/HS 2020/Env Pol 1 - Climate networks/Scripts/Week9/text_files/centrality.nw1_en.csv")
nw.1 <- delete.vertices(simplify(nw.1), degree(nw.1)==0)
plot(nw.1)
myCentrality <- function(net) {
if (!is.igraph(net)) stop ("Input is not an igraph object")
deg <- degree(net, loop=F, normalized = F)
deg_norm <- degree (net, loop=F, normalized = T)
btw <- betweenness (net, normalized=TRUE)
evc <- evcent(net)$vector
pgr <- page.rank(net)$vector
id <- V(net)
ret <-data.frame (cbind(ID=id, Degree=deg, Degree_norm=deg_norm, Betweenness=btw,
Eigenvector=evc, PageRank=pgr))
return(ret)
}
Results <- myCentrality(nw.1)
Results_r <- data.frame(apply(Results[1:5],2, function(x) round(x, 3)))
write.csv2(Results, file = "Data/centrality.nw1_en.csv")
# Load Connections
conn <- dna_connection("Data/DNA_file_2009_10_Marlene.dna") # this is a dataset on Switzerland
# Load network & save two-mode as .csv file
nw = dna_network (conn, networkType = "twomode",
statementType = "DNA Statement",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "combine", # co-agreement; or co-disagreement
# normalization = "activity",
isolates = FALSE,
duplicates = "document" # I want to count the number times an actor or concept is measured across all docs, but not within
# excludeValues = list("concept" =
#"CC as threat to the domestic economy.", "concept" = "Significant carbon sink potential in soil.", "concept" = "Changing individual lifestyle feasible.")
)
# Load attributes
at1 = dna_getAttributes(conn, variable = "organization")
at2 = dna_getAttributes(conn, variable = "concept")
# write files
rownames(nw) <- at1$alias
colnames(nw) <- at2$value
write.csv2(nw, file ="Results/two-mode-CH_en.csv") # for later use
write.csv2(at1, file = "Results/Covariables_Actors_Switzerland.csv")
write.csv2(at2, file = "Results/Covariables_Concepts_Switzerland.csv")
# help("dna_network")
one_mode_actors_norm = dna_network (conn, networkType = "onemode",
statementType = "DNA Statement",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement",
qualifierAggregation = "congruence", # co-agreement; or co-disagreement
normalization = "Jaccard",
isolates = FALSE,
duplicates = "document", # I want to count the number times an actor or concept is measured across all docs, but not within
excludeValues = list("concept" =
"CC as threat to the domestic economy.", "concept" = "Significant carbon sink potential in soil.", "concept" = "Changing individual lifestyle feasible.")
)
# Create network object
one_mode_actors_net_norm <- network(one_mode_actors_norm, directed = FALSE, ignore.eval = FALSE, names.eval="weight")
# adding attributes 1
one_mode_actors_net_norm%v%"actorType" <-at1$alias
one_mode_actors_net_norm%v%"name" <-at1$type
unique(at1$alias)
# install.packages("GGally")
library(GGally)
# see tutorial on ggnet here: https://briatte.github.io/ggnet/
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 3, mode = "fruchtermanreingold",  node.size = 10,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "actorType", color.legend = "Actor type",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("Government" = "red", "Civil society" = "green", "Business" = "yellow",
"Science" = "blue", "Political party" = "grey",
"IGO" = "orange", "Civil Society" = "white"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
ggsave("Results/graph_degree1_actor-actor_CH_2009_fruchtermanreingold.v2_en.png", width = 29, height = 18,  device = NULL, dpi = 300)
par(mfrow = c(1, 2))
dna_barplot(conn, of = "concept", fontSize = 10)
dna_barplot(conn, of = "organization", fontSize = 10)
library(igraph)
rownames(one_mode_actors_norm) <- at1$type
colnames(one_mode_actors_norm) <- at1$type
nw.1 <- graph.adjacency(one_mode_actors_norm, mode = "undirected", weighted = TRUE)
set_vertex_attr(nw.1, "alias", value = at1$type)
set_vertex_attr(nw.1, "actor.type", value = at1$alias)
nw.1 <- delete.vertices(simplify(nw.1), degree(nw.1)==0)
plot(nw.1)
myCentrality <- function(net) {
if (!is.igraph(net)) stop ("Input is not an igraph object")
deg <- degree(net, loop=F, normalized = F)
deg_norm <- degree (net, loop=F, normalized = T)
btw <- betweenness (net, normalized=TRUE)
evc <- evcent(net)$vector
pgr <- page.rank(net)$vector
id <- V(net)
ret <-data.frame (cbind(ID=id, Degree=deg, Degree_norm=deg_norm, Betweenness=btw,
Eigenvector=evc, PageRank=pgr))
return(ret)
}
Results <- myCentrality(nw.1)
Results_r <- data.frame(apply(Results[1:5],2, function(x) round(x, 3)))
write.csv2(Results, file = "Data/centrality.nw1_en.csv")
par(mfrow = c(1, 2))
hist(Results$Degree, main = NULL,
xlab = "Degree", ylab = "Frequency: Actors share the same concepts")
myCentralization <- function(net) {
if (!is.igraph(net)) stop ("Input is not an igraph object")
dens <- edge_density(net) # existing ties/possible ties
mean <- mean(degree(net)) # average number of ties
diameter <- diameter(net) # length of the longest geodesic
centrBetw <- centr_betw(net) # Is the network dominated by one, or a few, central actors, here according to degree
centrDegree <- centr_degree(net) # Is the network dominated by one, or a few, central actors, here according to betweenness centrality
cohesion <- cohesion(net) # i.e., are these networks fragmented into multiple components, or is there a single component?
transitivity <- transitivity(net) # To what degree could we expect these networks to easily break down into subgroups? (Another measure of interconnectedness)
ret <-data.frame (cbind(Density=dens, AvDegree=mean, Diameter=diameter, C.Betweeness = centrBetw$centralization , C.Degree = centrDegree$centralization,
Cohesion=cohesion, Transitivity=transitivity))
return(ret)
}
myCentralization(nw.1)
# help(dna_multiclust)
mc <- dna_multiclust(conn, statementType = "DNA Statement",
variable1 = "organization",
variable2 = "concept",
qualifier = "agreement", duplicates = "acrossrange",
start.date = "01.11.2009", stop.date = "31.12.2010",
start.time = "00:00:00", stop.time = "23:59:59", timewindow = "no",
windowsize = 100,
# excludeValues = list(
#   "concept" =   "CC as business opportunity.",
#   "concept" = "Drastic reduction in energy consumption needed.",
#   "concept" = "20% reduction (national target).",
#   "organization" = "Verkehrs-Club Schweiz",
#   "organization" = "Greenpeace Switzerland",
#   "organization" = "Federal Council"),
k = 0, k.max = 5, single = FALSE, average = FALSE,
complete = FALSE, ward = TRUE, kmeans = TRUE, pam = TRUE,
equivalence = FALSE, concor_one = TRUE, concor_two = TRUE,
louvain = TRUE, fastgreedy = TRUE, walktrap = TRUE,
leading_eigen = TRUE, edge_betweenness = TRUE, infomap = FALSE,
label_prop = TRUE, spinglass = TRUE, verbose = TRUE)
mc$max_mod
mc$modularity
View(clust$network)
mc$memberships
clust <- dna_cluster(conn,
duplicates = "acrossrange",
attribute1 = "type",
collate = TRUE,
clust.method = "walktrap",
cutree.k = 7,
# excludeValues = list(
# "concept" =   "CC as business opportunity.",
# "concept" = "Drastic reduction in energy consumption needed.",
# "concept" = "20% reduction (national target).",
# "organization" = "Verkehrs-Club Schweiz",
# "organization" = "Greenpeace Switzerland",
# "organization" = "Federal Council")
)
# I create a data frame, which contains labels and group membership
coalitions <- data.frame(clust$labels, clust$group)
# I sort the attributes and cluster data frame
coalitions <- arrange(coalitions, coalitions$clust.labels)
at1 <- arrange(at1, value)
# I add the group variable to the attribute data.frame in character format
at1$coalitions <- as.character(coalitions$clust.group)
# I assing the actors to either pro economy or pro ecology or no coalition following Ingold 2011
at1$coalitions[at1$coalitions== "Group 1" ]<-"pro ecology"
at1$coalitions[at1$coalitions== "Group 2" ]<-"pro economy"
at1$coalitions[at1$coalitions== "Group 3" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 4" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 5" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 6" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 7" ]<-"no coalition"
write.csv2(at1, file = "Covariables_Actors_Switzerland_col.csv")
# I add those variables to the network
one_mode_actors_net_norm%v%"Discourse coalition" <- at1$coalitions
one_mode_actors_net_norm%v%"actorType" <-at1$type
one_mode_actors_net_norm%v%"name" <-at1$alias
# Now, I plot the network for publication
# For analysis, discuss groups and outliers within group
# Comparison of phases >> what has changed?
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 5, mode = "fruchtermanreingold",  node.size = 15,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "Discourse coalition", color.legend = "Discourse coalition",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("pro ecology" = "dark green", "pro economy" = "red", "no coalition" = "grey"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
dna_plotDendro(clust,  shape = "diagonal", colours = "brewer", rectangles = "red")
summary(at1$coalitions)
# help("dna_plotCoordinates")
## ggf plot noch anpassen
dna_plotCoordinates(clust,
axis_labels = c("Dimension A", "Dimension B"),
draw_polygons = FALSE,
label = TRUE,
jitter = c(1.7, 1.9),
clust_method = "inherit",
seed = 12345,
title = character())
coalitions <- data.frame(clust$labels, clust$group)
# I sort the attributes and cluster data frame
coalitions <- arrange(coalitions, coalitions$clust.labels)
at1 <- arrange(at1, value)
# I add the group variable to the attribute data.frame in character format
at1$coalitions <- as.character(coalitions$clust.group)
# I assing the actors to either pro economy or pro ecology or no coalition following Ingold 2011
at1$coalitions[at1$coalitions== "Group 1" ]<-"pro ecology"
at1$coalitions[at1$coalitions== "Group 2" ]<-"pro economy"
at1$coalitions[at1$coalitions== "Group 3" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 4" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 5" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 6" ]<-"no coalition"
at1$coalitions[at1$coalitions== "Group 7" ]<-"no coalition"
write.csv2(at1, file = "Results/Covariables_Actors_Switzerland_col.csv")
ggnet2(one_mode_actors_net_norm, alpha = 0.75, label = "name", label.size = 5, mode = "fruchtermanreingold",  node.size = 15,
size = "degree", size.min = 1, size.cut = 5, size.legend = "Degree-Centrality",
color = "Discourse coalition", color.legend = "Discourse coalition",
geom_jitter(width = 0.5, height = 0.5),
color.palette = c("pro ecology" = "dark green", "pro economy" = "red", "no coalition" = "grey"),
# shape.palette = c("support" = 16, "oppose" = 17, "no" = 3),
legend.size = 20, legend.position = "bottom")
ggsave("Results/cluster-plot.png", width = 29, height = 18,  device = NULL, dpi = 300)
dna_plotDendro(clust,  shape = "diagonal", colours = "brewer", rectangles = "red")
dat = import_factiva("/Data/html_files/")
dat = import_factiva("Data/html_files/")
dat = import_factiva("Data/html_files")
library(newspapers)
dat = import_factiva("Data/html_files")
library(newspapers)
dat = import_factiva("C:/Users/kammerer/OneDrive - Universitaet Bern/Lehre/UniBE_HS23/EnvPol1_networks/SeminarClimateNetworks/Data/html_files")
library(newspapers)
dat = import_factiva("C:/Users/kammerer/OneDrive - Universitaet Bern/Lehre/UniBE_HS23/EnvPol1_networks/SeminarClimateNetworks/Data/html_files")
require(newspapers, quietly = TRUE)
dat = import_factiva("Data/html_files")
require(newspapers, quietly = TRUE)
dat = import_factiva("Data/html_files/")
require(newspapers, quietly = TRUE)
library(tidyverse)
library(stringr)
# install.packages("tm")
library(tm)
library(dplyr)
setwd("C:/Users/kammerer/OneDrive - Universitaet Bern/Lehre/UniBE_HS23/EnvPol1_networks/SeminarClimateNetworks")
dat = import_factiva("Data/html_files/")
dat = import_factiva("Data/html_files/")
detach("network", unload=TRUE)
detach("sna", unload=TRUE)
detach("package:sna", unload=TRUE)
detach("package:statnet", unload=TRUE)
detach("package:statnet", unload=TRUE)
rownames(one_mode_actors_norm) <- at1$type
colnames(one_mode_actors_norm) <- at1$type
nw.1 <- graph.adjacency(one_mode_actors_norm, mode = "undirected", weighted = TRUE)
set_vertex_attr(nw.1, "alias", value = at1$type)
set_vertex_attr(nw.1, "actor.type", value = at1$alias)
nw.1 <- delete.vertices(simplify(nw.1), degree(nw.1)==0)
plot(nw.1)
myCentrality <- function(net) {
if (!is.igraph(net)) stop ("Input is not an igraph object")
deg <- degree(net, loop=F, normalized = F)
deg_norm <- degree (net, loop=F, normalized = T)
btw <- betweenness (net, normalized=TRUE)
evc <- evcent(net)$vector
pgr <- page.rank(net)$vector
id <- V(net)
ret <-data.frame (cbind(ID=id, Degree=deg, Degree_norm=deg_norm, Betweenness=btw,
Eigenvector=evc, PageRank=pgr))
return(ret)
}
Results <- myCentrality(nw.1)
Results_r <- data.frame(apply(Results[1:5],2, function(x) round(x, 3)))
write.csv2(Results, file = "Data/centrality.nw1_en.csv")
detach("package:statnet", unload=TRUE)
# nw.1 <- delete.vertices(simplify(nw.1), degree(nw.1)==0)
# plot(nw.1)
myCentrality <- function(net) {
if (!is.igraph(net)) stop ("Input is not an igraph object")
deg <- degree(net, loop=F, normalized = F)
deg_norm <- degree(net, loop=F, normalized = T)
btw <- betweenness (net, normalized=TRUE)
evc <- evcent(net)$vector
pgr <- page.rank(net)$vector
id <- V(net)
ret <-data.frame (cbind(ID=id, Degree=deg, Degree_norm=deg_norm, Betweenness=btw,
Eigenvector=evc, PageRank=pgr))
return(ret)
}
Results <- myCentrality(nw.1)
Results_r <- data.frame(apply(Results[1:5],2, function(x) round(x, 3)))
write.csv2(Results, file = "Data/centrality.nw1_en.csv")
